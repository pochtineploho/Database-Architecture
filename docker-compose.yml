version: '3.8'

services:
  etcd1: &etcd
    image: patroni
    networks: [ project_network ]
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: cluster
      ETCD_UNSUPPORTED_ARCH: arm64
    container_name: project-etcd1
    hostname: etcd1
    command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  etcd2:
    <<: *etcd
    image: patroni
    networks: [ project_network ]
    container_name: project-etcd2
    hostname: etcd2
    command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  haproxy:
    image: patroni
    networks: [ project_network ]
    env_file: patroni/docker/patroni.env
    hostname: haproxy
    ports:
      - "5000:5000"
      - "5001:5001"
    command: haproxy
    environment: &haproxy_env
      ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379
      PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379'"
      PATRONI_SCOPE: project_network

  patroni1:
    image: patroni
    networks: [ project_network ]
    env_file: patroni/docker/patroni.env
    hostname: patroni1
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni1

  patroni2:
    image: patroni
    networks: [ project_network ]
    env_file: patroni/docker/patroni.env
    hostname: patroni2
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni2
    depends_on:
      - etcd1
      - etcd2
      - haproxy
      - patroni1
    volumes:
      - ./dump.sql:/backups/dump.sql

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - MIGRATION_VERSION=${MIGRATION_VERSION:-latest}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - .env:/config/env
      - ./migrations:/migrations/
      - ./init_scripts:/docker-entrypoint-initdb.d

  data_generation:
    build: ./data_generation
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_PORT=5432
      - NUM_RECORDS=${ENTITIES_QUANTITY:-1000000}
    volumes:
      - ./data_generation:/src
    depends_on:
      - postgres

  performance_test:
    build: ./performance_test
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_PORT=5432
      - ATTEMPTS=${ATTEMPTS:-3}
    volumes:
      - ./performance_test:/src
      - ./performance_test/query_performance_results:/src/query_performance_results
    depends_on:
      - postgres

  backup_service:
    build: ./backup_service
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - BACKUP_INTERVAL=${BACKUP_INTERVAL_HOURS:-3}
      - MAX_BACKUPS=${MAX_BACKUPS_TO_KEEP:-3}
      - POSTGRES_PORT=5432
      - BACKUP_DIR=/src/backups
    volumes:
      - ./backup_service:/src
      - ./backup_service/backups:/src/backups
    depends_on:
      - postgres

  emergency:
    build: ./emergency
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_PORT=5432
      - NUM_RECORDS=${ENTITIES_QUANTITY:-1000000}
    volumes:
      - ./emergency:/src
    depends_on:
      - postgres

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  project_network:
